{"version":3,"sources":["Components/Card/card.js","Components/Menu/Menu.jsx","App.js","serviceWorker.js","index.js"],"names":["card","props","clickLeft","lastIndex","state","slidesArr","length","currentPic","index","setState","clickRight","imgs","className","onClick","this","src","alt","Component","Menu","Navbar","Breadcrumb","Item","href","App","list","Cardjson","showCard","map","eachCard","i","key","console","log","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"417VAqDeA,G,MAjDf,YACE,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAOVC,UAAY,WACV,IACMC,EADS,YAAO,EAAKC,MAAMC,WACHC,OAAS,EAC/BC,EAAe,EAAKH,MAApBG,WAEFC,EADkC,IAAfD,EACSJ,EAAYI,EAAa,EAE3D,EAAKE,SAAS,CACZF,WAAYC,KAhBK,EAoBrBE,WAAa,WACX,IACMP,EADU,YAAO,EAAKC,MAAMC,WACHC,OAAS,EAChCC,EAAe,EAAKH,MAApBG,WAEFC,EADmBD,IAAeJ,EACN,EAAII,EAAa,EAEnD,EAAKE,SAAS,CACZF,WAAYC,KA1BZ,EAAKJ,MAAQ,CACXG,WAAY,EACZF,UAAW,EAAKJ,MAAMU,MAJP,EADrB,sEAiCI,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,YACf,4BAAQC,QAASC,KAAKZ,WAAtB,QACA,yBAAKa,IAAKD,KAAKV,MAAMC,UAAUS,KAAKV,MAAMG,YAAcS,IAAI,aAC5D,4BAAQH,QAASC,KAAKJ,YAAtB,UAEA,yBAAKE,UAAU,WACb,uCACA,2CA1CV,GAA0BK,c,sBCAX,SAASC,IACtB,OACE,kBAACC,EAAA,EAAD,CAAQP,UAAU,oBAChB,uBAAGA,UAAU,QAAb,MAEA,kBAACQ,EAAA,EAAD,KACE,kBAACA,EAAA,EAAWC,KAAZ,CAAiBC,KAAK,KAAtB,oBACA,kBAACF,EAAA,EAAWC,KAAZ,CAAiBC,KAAK,KAAtB,gCACA,kBAACF,EAAA,EAAWC,KAAZ,iBACA,kBAACD,EAAA,EAAWC,KAAZ,wBAGF,sD,ICTeE,E,2MACnBnB,MAAQ,CACNoB,KAAMC,G,EAGRC,SAAW,WACT,OAAO,EAAKtB,MAAMoB,KAAKG,KAAI,SAACC,EAAUC,GACpC,OACE,kBAAC,EAAD,CAAMjB,UAAU,OAAOkB,IAAKD,EAAGlB,KAAMiB,EAAS,sB,wEAOlD,OAFAG,QAAQC,IAAI,eAAgBlB,KAAKV,MAAMoB,MAGrC,yBAAKZ,UAAU,OACb,kBAAC,EAAD,MACA,kDACA,yBAAKA,UAAU,WAAWE,KAAKY,iB,GAnBNT,aCKbgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCTNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDoHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8601c9cf.chunk.js","sourcesContent":["import React, { Component }  from \"react\";\nimport './card.css';\n// import Cardjson from './craigslist.json.js';\n\nexport class card extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentPic: 0,\n      slidesArr: this.props.imgs\n      // list: Cardjson\n    }\n}\nclickLeft = () => {\n  let moveleftArr = [...this.state.slidesArr]\n  const lastIndex = moveleftArr.length - 1;\n  const { currentPic } = this.state;\n  const shouldResetIndex = currentPic === 0;\n  const index =  shouldResetIndex ? lastIndex : currentPic - 1;\n\n  this.setState({\n    currentPic: index\n  });\n}\n\nclickRight = () => {\n  let moverightArr = [...this.state.slidesArr]\n  const lastIndex = moverightArr.length - 1;\n  const { currentPic } = this.state;\n  const shouldResetIndex = currentPic === lastIndex;\n  const index =  shouldResetIndex ? 0 : currentPic + 1;\n\n  this.setState({\n    currentPic: index\n  });\n}\n  render() {\n    return (\n      <div className=\"card-wrapper\">\n        <div className=\"carousel\">\n        <button onClick={this.clickLeft}>Left</button>\n        <img src={this.state.slidesArr[this.state.currentPic]}  alt=\"carousel\" />\n        <button onClick={this.clickRight}>Right</button>\n        </div>\n        <div className=\"content\">\n          <h3>Details</h3>\n          <h4>Price</h4>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default card\n","import React from \"react\";\n\nimport { Breadcrumb, Navbar } from \"react-bootstrap\";\nimport \"./Menu.css\";\nexport default function Menu() {\n  return (\n    <Navbar className=\"navbar-container\">\n      <p className=\"logo\">CL</p>\n\n      <Breadcrumb>\n        <Breadcrumb.Item href=\"#\">general location</Breadcrumb.Item>\n        <Breadcrumb.Item href=\"#\">all areas or a specific area</Breadcrumb.Item>\n        <Breadcrumb.Item>category</Breadcrumb.Item>\n        <Breadcrumb.Item>sub-categories</Breadcrumb.Item>\n      </Breadcrumb>\n\n      <p>User Icon will be here</p>\n    </Navbar>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Cardjson from \"./craigslist.json\";\nimport Card from \"./Components/Card/card\";\nimport Menu from \"./Components/Menu/Menu\";\n\nexport default class App extends Component {\n  state = {\n    list: Cardjson\n  };\n\n  showCard = () => {\n    return this.state.list.map((eachCard, i) => {\n      return (\n        <Card className=\"card\" key={i} imgs={eachCard[\"Image Links \"]}></Card>\n      );\n    });\n  };\n  render() {\n    console.log(\"this is list\", this.state.list);\n\n    return (\n      <div className=\"App\">\n        <Menu />\n        <h1>Craigslist Mock Up</h1>\n        <div className=\"gallery\">{this.showCard()}</div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { HashRouter } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}